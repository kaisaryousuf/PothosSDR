diff --git a/cmake/Modules/GrVersion.cmake b/cmake/Modules/GrVersion.cmake
index 6d39d8d4b..cf8904367 100644
--- a/cmake/Modules/GrVersion.cmake
+++ b/cmake/Modules/GrVersion.cmake
@@ -75,5 +75,5 @@ else()
     set(DOCVER "${VERSION}")
     set(LIBVER "${MAJOR_VERSION}.${API_COMPAT}.${MINOR_VERSION}")
     set(RC_MINOR_VERSION ${MINOR_VERSION})
-    set(RC_MAINT_VERSION ${MAINT_VERSION})
+    set(RC_MAINT_VERSION "0")
 endif()
diff --git a/gnuradio-runtime/include/gnuradio/rpcserver_aggregator.h b/gnuradio-runtime/include/gnuradio/rpcserver_aggregator.h
index 9a08a0388..d98eab629 100644
--- a/gnuradio-runtime/include/gnuradio/rpcserver_aggregator.h
+++ b/gnuradio-runtime/include/gnuradio/rpcserver_aggregator.h
@@ -13,6 +13,7 @@
 
 #include <gnuradio/rpcmanager_base.h>
 #include <gnuradio/rpcserver_base.h>
+#include <functional>
 #include <string>
 #include <vector>
 
@@ -42,7 +43,7 @@ public:
 
 private:
     template <class T, typename Tcallback>
-    struct registerConfigureCallback_f : public std::unary_function<T, void> {
+    struct registerConfigureCallback_f : public std::function<void(T)> {
         registerConfigureCallback_f(const std::string& _id, const Tcallback _callback)
             : id(_id), callback(_callback)
         {
@@ -55,7 +56,7 @@ private:
     };
 
     template <class T, typename Tcallback>
-    struct unregisterConfigureCallback_f : public std::unary_function<T, void> {
+    struct unregisterConfigureCallback_f : public std::function<void(T)> {
         unregisterConfigureCallback_f(const std::string& _id) : id(_id) { ; }
 
         void operator()(T& x) { x->i()->unregisterConfigureCallback(id); }
@@ -63,7 +64,7 @@ private:
     };
 
     template <class T, typename Tcallback>
-    struct registerQueryCallback_f : public std::unary_function<T, void> {
+    struct registerQueryCallback_f : public std::function<void(T)> {
         registerQueryCallback_f(const std::string& _id, const Tcallback _callback)
             : id(_id), callback(_callback)
         {
@@ -76,7 +77,7 @@ private:
     };
 
     template <class T, typename Tcallback>
-    struct unregisterQueryCallback_f : public std::unary_function<T, void> {
+    struct unregisterQueryCallback_f : public std::function<void(T)> {
         unregisterQueryCallback_f(const std::string& _id) : id(_id) { ; }
 
         void operator()(T& x) { x->i()->unregisterQueryCallback(id); }
@@ -85,7 +86,7 @@ private:
 
 
     template <class T, typename Tcallback>
-    struct registerHandlerCallback_f : public std::unary_function<T, void> {
+    struct registerHandlerCallback_f : public std::function<void(T)> {
         registerHandlerCallback_f(const std::string& _id, const Tcallback _callback)
             : id(_id), callback(_callback)
         {
@@ -98,7 +99,7 @@ private:
     };
 
     template <class T, typename Tcallback>
-    struct unregisterHandlerCallback_f : public std::unary_function<T, void> {
+    struct unregisterHandlerCallback_f : public std::function<void(T)> {
         unregisterHandlerCallback_f(const std::string& _id) : id(_id) { ; }
 
         void operator()(T& x) { x->i()->unregisterHandlerCallback(id); }
diff --git a/gnuradio-runtime/lib/CMakeLists.txt b/gnuradio-runtime/lib/CMakeLists.txt
index 8dc923221..096ffe847 100644
--- a/gnuradio-runtime/lib/CMakeLists.txt
+++ b/gnuradio-runtime/lib/CMakeLists.txt
@@ -46,7 +46,7 @@ set(MATH_SINE_TABLE_GENERATOR ${CMAKE_CURRENT_SOURCE_DIR}/math/gen_sine_table.py
 add_custom_command(
   DEPENDS ${MATH_SINE_TABLE_GENERATOR}
   OUTPUT ${MATH_SINE_TABLE_HEADER}
-  COMMAND ${PYTHON_EXECUTABLE} ${MATH_SINE_TABLE_GENERATOR} | install -D /dev/stdin ${MATH_SINE_TABLE_HEADER}
+  COMMAND ${PYTHON_EXECUTABLE} ${MATH_SINE_TABLE_GENERATOR} > ${MATH_SINE_TABLE_HEADER}
 )
 
 add_library(gnuradio-runtime
diff --git a/gnuradio-runtime/python/gnuradio/__init__.py b/gnuradio-runtime/python/gnuradio/__init__.py
index ab3bbdbf1..db7bc5cc4 100644
--- a/gnuradio-runtime/python/gnuradio/__init__.py
+++ b/gnuradio-runtime/python/gnuradio/__init__.py
@@ -13,6 +13,19 @@ GNU Radio is licensed under the GNU General Public License (GPL) version 3. All
 
 import os
 
+# python3.8 and up need to have the dll search path set
+# https://docs.python.org/3/whatsnew/3.8.html#bpo-36085-whatsnew
+if os.name == 'nt' and hasattr(os, 'add_dll_directory'):
+    root_dir = __file__
+    for i in range(5): #limit search depth
+        root_dir = os.path.dirname(root_dir)
+        bin_dir = os.path.join(root_dir, 'bin')
+        if os.path.exists(bin_dir):
+            try: os.add_dll_directory(bin_dir)
+            except Exception as ex:
+                print('add_dll_directory(%s): %s'%(bin_dir, ex))
+            break
+
 # Check if the gnuradio package is installed or whether we're attempting to import it from
 # the build directory.
 path_ending = os.path.join('gnuradio-runtime', 'python', 'gnuradio', '__init__.py')
diff --git a/gr-qtgui/lib/TimeRasterDisplayPlot.cc b/gr-qtgui/lib/TimeRasterDisplayPlot.cc
index 7ce565207..201267f61 100644
--- a/gr-qtgui/lib/TimeRasterDisplayPlot.cc
+++ b/gr-qtgui/lib/TimeRasterDisplayPlot.cc
@@ -350,7 +350,7 @@ protected:
             }
 
             double x_label = d_x_start_value + x / (double)d_cols * d_x_delta_value;
-            if ((d_y_delta_value > 999.0) or (d_y_delta_value <= 1.0)) {
+            if ((d_y_delta_value > 999.0) || (d_y_delta_value <= 1.0)) {
                 QwtText t(QString(QString("").sprintf("%.2f, %.2e", x_label, y)));
                 return t;
             } else {
